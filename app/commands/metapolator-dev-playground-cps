#!/usr/bin/env node

"use strict";

exports.command = {
    description: 'process the given CPS file'
  , arguments: '<cps-file>'
};

var path = require('path');
var requirejs = require('requirejs');
require('rootpath')();
requirejs.config(require('config'));

if (require.main === module) {
    requirejs([
        'commander'
      , 'metapolator/errors'
      , 'ufojs/tools/io/staticNodeJS'
      , 'metapolator/models/CPS/parsing/parseRules'
      , 'metapolator/models/Controller'
      , 'metapolator/models/MOM/Univers'
      , 'metapolator/models/MOM/Master'
      , 'metapolator/models/MOM/Glyph'
      , 'metapolator/models/MOM/PenStroke'
      , 'metapolator/models/MOM/PenStrokePoint'
      , 'metapolator/models/CPS/Registry'
    ], function (
        program
      , errors
      , io
      , parseRules
      , Controller
      , Univers
      , Master
      , Glyph
      , PenStroke
      , PenStrokePoint
      , Registry
    ) {
        var CommandLineError = errors.CommandLine;

        program._name = path.basename(process.argv[1], '.js').replace('-', ' ');
        program.arguments(exports.command.arguments);
        program.action(function(CPSfile) {
            if (program.args.length > program._args.length + 1)
                program.help();

            var cpsString = io.readFile(false, CPSfile)
            var parameterRegistry = new Registry();

            // FIXME: a ParameterDescription class/interface definition could
            // be the point here. So we can ensure a consistent api and
            // pinpoint programming errors
            parameterRegistry.register('value', {
                        type: 'string'
                      , description: 'this is a stub for the parameter description!'
            });

            parameterRegistry.register('height', {
                        type: 'compoundReal'
                      , description: 'the relative value of height'
            });

            parameterRegistry.register('heightIntrinsic', {
                        type: 'real'
                      , description: 'the intrinsic value of the height'
            });

            parameterRegistry.register('width', {
                        type: 'compoundReal'
                      , description: 'the relative value of width'
            });

            parameterRegistry.register('widthIntrinsic', {
                        type: 'real'
                      , description: 'the intrinsic value of the width'
            });

            parameterRegistry.register('zon', {
                        type: 'compoundVector'
                      , description: 'The center on curve point of a skeleton point'
            })
            parameterRegistry.register('zonIntrinsic', {
                        type: 'vector'
                      , description: 'the intrinsic value of the zon'
            })

            var result = parseRules.fromString(cpsString, CPSfile, parameterRegistry)
              , controller = new Controller(parameterRegistry)
              , univers = controller.query('univers')
              , ralph = new Master()
              , heidi = new Master()
              , mastersOfTheUnivers
              , data = {}
              ;
            ralph.id = 'ralph';
            heidi.id = 'heidi';

            controller.addMaster(ralph, [result])
            controller.addMaster(heidi, [result])

            mastersOfTheUnivers = univers.children;

            data[ralph.id] = {
                glyphs: [
                          ['a',[//strokes
                            Array(3),Array(4),Array(8)
                          ]]
                        , ['b',[//strokes
                            Array(4),Array(10),Array(14)
                        ]]
                        , ['c',[//strokes
                            Array(12),Array(5),Array(24)
                        ]]
                ]
            }
            data[heidi.id] = {
                glyphs: [
                          ['x',[//strokes
                            Array(3),Array(4),Array(8)

                          ]]
                        , ['y',[//strokes
                            Array(4),Array(10),Array(14)
                        ]]
                        , ['z',[//strokes
                            Array(12),Array(5),Array(24)
                        ]]
                ]

            }

            for(var h=0; h<mastersOfTheUnivers.length; h++) {
                var glyphs = data[mastersOfTheUnivers[h].id].glyphs;
                for(var i=0;i<glyphs.length;i++) {
                    var glyph = new Glyph();
                    glyph.id = glyphs[i][0];
                    mastersOfTheUnivers[h].add(glyph);
                    for(var j=0;j<glyphs[i][1].length;j++) {
                        var stroke = new PenStroke();
                        glyph.add(stroke);
                        for(var k=0;k<glyphs[i][1][j].length;k++) {
                            var point = new PenStrokePoint();
                            stroke.add(point);
                        }
                    }
                }
            }

            var element = controller.query('master#ralph glyph point:i(23)');

            console.log('element:', element.particulars);
            var computed = controller.getComputedStyle(element)
              , valueInstance = computed.get('width')
              ;


            console.log('result ' + valueInstance.value, valueInstance._components.join('|'));


            element = controller.query('master#heidi glyph#y penstroke:i(0) point:i(0)')
            console.log('element:', element.particulars);
            computed = controller.getComputedStyle(element)
            valueInstance = computed.get('zon')
            console.log('result ' + valueInstance.value, valueInstance._components.join('|'));
            console.log(valueInstance = computed.get('value'));

          });
        program.parse(process.argv);
        if (process.argv.length < program._args.length + 2)
            program.help();
    }
)}
