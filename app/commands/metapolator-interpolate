#!/bin/sh
__hash_bang_trick=/* exec /usr/bin/env node --harmony "$0" "$@"  # -*- mode: javascript; -*- */undefined

"use strict";

exports.command = {
    description: 'Interpolate a comma-separated list of masters according to a corresponding list of proportions'
  , arguments: '<masters> <proportions> <new-master>'
};

var path = require('path');
var requirejs = require('requirejs');
require('rootpath')();
requirejs.config(require('config'));

if (require.main === module) {
    requirejs([
        'commander'
      , 'metapolator/errors'
      , 'metapolator/parseArgs'
      , 'ufojs/tools/io/staticNodeJS'
      , 'metapolator/project/MetapolatorProject'
    ], function (
        program
      , errors
      , parseArgs
      , io
      , MetapolatorProject
    ) {
        var CommandLineError = errors.CommandLine;

        program._name = path.basename(process.argv[1], '.js').replace('-', ' ');
        program.arguments(exports.command.arguments);
        program.description(exports.command.description);
        program.action(function(masters, proportions, newMaster) {
            var i, k
              , sum = 0
              , project = new MetapolatorProject(io)
              , interpKeys
              , cps, cpsName;
            // Get master list
            masters = masters.split(',')

            // Parse proportions
            proportions = proportions.split(',')
            if (masters.length != proportions.length)
                throw new CommandLineError('number of proportions must match number of masters');
            for(i = 0; i < proportions.length; i++)
                proportions[i] = parseFloat(proportions[i]);
            for(i = 0; i < proportions.length; i++)
                sum += proportions[i];
            if (Math.abs(sum - 1.0) > .001)
                console.warn('Proportions do not sum to (roughly) 1');

            project.load();

            // Open existing masters
            for(i = 0; i < masters.length; i++) {
                masters[i] = parseArgs.masterName(masters[i]);
                project.open(masters[i]);
            }

            // Create new master
            newMaster = parseArgs.masterName(newMaster);
            cpsName = newMaster + '.cps';
            master = project.createMaster(newMaster, [cpsName], project._data.masters[masters[0]].skeleton);

            // Load interpolation CPS, adjust it, and get to work
            cps = '* {\n\
    on: onIntrinsic;\n\
    in: inIntrinsic;\n\
    out: outIntrinsic;\n\
    inDir: inDirIntrinsic;\n\
    outDir: outDirIntrinsic;\n\
    inTension: 0;\n\
    outTension: 0;\n\
    inIntrinsic: Vector 0 0;\n\
    outIntrinsic: Vector 0 0;\n\
    inDirIntrinsic: 0;\n\
    outDirIntrinsic: 0;\n\
}\n\
\n\
@dictionary {\n\
    point>*{\n\
        indexGlyph: parent:parent:parent:index;\n\
        indexPenstroke: parent:parent:index;\n\
        indexPoint: parent:index;\n\
'

            for(i = 0; i < masters.length; i++) {
                cps += '        equivalent_' + (i+1) + ': S"master#' + masters[i] + '":children[indexGlyph]:children[indexPenstroke]:children[indexPoint]:children[index];\n' +
                    '        proportion_' + (i+1) + ': ' + proportions[i] + ';\n';
            }

            cps += '    }\n\
}\n\
\n\
* {\n\
';

            interpKeys = ['on', 'onLength', 'in', 'out', 'inDir', 'outDir', 'onDir', 'inTension', 'outTension', 'inIntrinsic', 'outIntrinsic', 'inDirInstrinsic', 'outDirIntrinsic', 'onIntrinsic'];
            for(k in interpKeys) {
                cps += '    ' + interpKeys[k] + ': ';
                for(i = 0; i < masters.length; i++)
                    cps += 'equivalent_' + (i+1) + ':' + interpKeys[k] + ' * proportion_' + (i+1) + (i < masters.length - 1 ? ' + ' : ';\n');
            }

            cps += '}\n\
\n\
point > left,\n\
point > right {\n\
    on: Polar onLength onDir + parent:center:on;\n\
    in: inIntrinsic + parent:center:on + parent:center:inIntrinsic + onIntrinsic;\n\
    out: outIntrinsic + parent:center:on + parent:center:outIntrinsic + onIntrinsic;\n\
    inDir: inDirIntrinsic + parent:center:inDir;\n\
    outDir: outDirIntrinsic + parent:center:outDir;\n\
}\n\
';

            // Save interpolated master
            master.saveCPS(cpsName, cps);
        });
        program.parse(process.argv);
    }
)}
