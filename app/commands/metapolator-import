#!/bin/sh
__hash_bang_trick=/* exec /usr/bin/env node --harmony "$0" "$@"  # -*- mode: javascript; -*- */undefined

"use strict";

exports.command = {
    description: 'import the given UFO directory to master <target-master>'
  , arguments: '<ufo> <target-master>'
};

var path = require('path');
var requirejs = require('requirejs');
require('rootpath')();
requirejs.config(require('config'));

if (require.main === module) {
    requirejs([
        'commander'
      , 'metapolator/errors'
      , 'metapolator/parseArgs'
      , 'ufojs/tools/io/staticNodeJS'
      , 'metapolator/project/MetapolatorProject'
    ], function (
        program
      , errors
      , parseArgs
      , io
      , MetapolatorProject
    ) {
        var CommandLineError = errors.CommandLine;

        program._name = path.basename(process.argv[1], '.js').replace('-', ' ');
        program.arguments(exports.command.arguments);
        program.action(function(sourceUFO, targetMaster) {
            var project = new MetapolatorProject(io);
            targetMaster = parseArgs.masterName(targetMaster);
            project.load();
            project.import(targetMaster, sourceUFO, program.glyphs);
        })
        .option('-g', '--glyphs <glyphs>', 'A comma-separated of glyph names to import',
            function(value) {
                var glyphNames = value.split(',')
                                 .map(function(item){ return item.trim(); })
                                 .filter(function(item){ return !!item.length; })

                if(!glyphNames.length)
                    throw new CommandLineError('The value of option "glyphs" '
                                              + 'did not produce a list of names, value was: "'
                                              + value + '" expected was a comma separated list '
                                              + 'of glyph names');
                return glyphNames;
            });
        program.parse(process.argv);
    }
)}
