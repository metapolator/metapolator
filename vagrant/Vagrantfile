# -*- mode: ruby -*-
# vi: set ft=ruby :

# Global configuration
red_pill_ports = ENV['VAGRANT_RED_PILL_PORTS'] || "3000"

# Vagrantfile API/syntax version.
VAGRANTFILE_API_VERSION = "2" if not defined?(VAGRANTFILE_API_VERSION)

# Parse red_pill_ports
class PortsError < Vagrant::Errors::VagrantError
  error_message = "Invalid port or port range"
end
ports = red_pill_ports.split('-')
if not (1..2).include?(ports.length) then
  raise PortsError.new
end
begin
  red_pill_port_from, red_pill_port_to = ports.map { |n| Integer(n) }
rescue
  raise PortsError.new
end
red_pill_port_to ||= red_pill_port_from

# Provision a Vagrant box with the Metapolator environment
# N.B. The following should be idempotent
$script = <<END
#!/bin/sh

set -e

USER=vagrant
eval "HOME=~$USER"
SHARED_DIR=/vagrant

# System setup
sudo apt-get update && sudo apt-get -y upgrade
sudo apt-get -y install git tree ruby bash-completion npm nodejs-legacy # nodejs-legacy gives us /usr/bin/node

# User setup
if ! grep metapolator $HOME/.bashrc; then
    cat - $HOME/.bashrc > bashrc <<ENDSH
export PATH="$SHARED_DIR/metapolator:\$PATH"
export RED_PILL_PORT=#{red_pill_port_from}
ENDSH
    mv bashrc .bashrc
fi

# Clone metapolator (read-write if we have an SSH key)
cd $SHARED_DIR
if test ! -e metapolator; then
    GIT_URL=https://github.com/metapolator/metapolator.git
    CHECKOUT_TYPE=read-only
    if test -e /vagrant/.ssh; then
        ln -s /vagrant/.ssh ~/
        GIT_URL=git@github.com:metapolator/metapolator.git
        CHECKOUT_TYPE=read-write
    fi
    echo "Checking out Metapolator $CHECKOUT_METHOD"
    git clone --recursive $GIT_URL # --recursive to get submodules
elif test ! -d metapolator/.git; then
    echo "You have a directory called 'metapolator' here, but it doesn't seem to be a git checkout"
    echo "Aborting: I don't want to overwrite this directory, whatever it is!"
    exit 1
fi

# NPM setup
cd metapolator
npm install

# bash-completion setup
cp bash-completion ~/.bash_completion

# git setup
./git-setup

# hub setup
sudo gem install hub
mkdir -p ~/bin
hub hub standalone > ~/bin/hub
END

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "ubuntu/trusty32"

  # Custom provisioning for Metapolator
  config.vm.provision :shell, privileged: false, inline: $script

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine.
  for i in red_pill_port_from..red_pill_port_to
    config.vm.network "forwarded_port", guest: i, host: i
  end

  # Use vagrant-cachier to get cached packages if available
  if Vagrant.has_plugin?("vagrant-cachier")
    # Configure cached packages to be shared between instances of the same base box.
    config.cache.scope = :box
  end

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.
end
