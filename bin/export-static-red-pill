#!/bin/sh
SOURCE="$(dirname $0)/..";
PROJECT=$1
TARGET=$2

mkdir "$TARGET" \
    && cp -a "$PROJECT/." "$TARGET/project" \
    && cp "$SOURCE/README.md" "$TARGET" \
    && cp "$SOURCE/LICENSE.txt" "$TARGET";


# copy files not suited for the optimizer

# The optimizer won't include this, because we load it as a shim
# when the browser has only the older (i.e. non-direct) Harmony Proxies
MODULE_0="lib/bower_components/harmony-reflect/reflect.js"
# The optimizer fails on Harmony generators
MODULE_1="lib/project/UFOExportController.es6.js"
# We have a feature detection in the main file, if generators
# are not supported, this file needs to be present
MODULE_2="lib/project/UFOExportController.js"
MODULES="$MODULE_0 $MODULE_1 $MODULE_2"
for module in $MODULES; do
    mkdir -p "$(dirname $TARGET/$module)" && cp "$SOURCE/app/$module" "$TARGET/$module";
done

for mainfile in "redPillMain" "sliderDemoMain" "metapolatorStandAlone"; do
# build the javascript into one file
    node $SOURCE/node_modules/.bin/r.js -o \
        optimize=none\
        mainConfigFile="$SOURCE/app/lib/browserConfig.js" \
        baseUrl="$SOURCE/app/lib" \
        paths.requireLib="bower_components/requirejs/require" \
        name="$mainfile" \
        include=requireLib,browserConfig \
        out="$TARGET/$mainfile"".js";
done


# build the less to css
node $SOURCE/node_modules/.bin/lessc \
        --include-path="$SOURCE/app/" \
        --strict-imports "$SOURCE/app/lib/ui/redPill/app.less" \
        "$TARGET/main.css";


# we keep the html files separate usually, but for an export we
# move them to the root directory
cp $SOURCE/app/lib/html/*.html $TARGET/;

echo 'copied html files to root';

for line in $(find $TARGET -maxdepth 1 -name "*.html" -type f); do
  echo "activating production <header> of $line";
  mv $line "$line~";
  sed s":<!-- development -->:<!-- development:" "$line~" | \
      sed s":<!-- production:<!-- production -->:" > "$line";
  unlink "$line~";
done

cp $TARGET/red-pill.html $TARGET/index.html;


# make a directory listing at index.html in $TARGET for every directory recursively

# There is a HTTP HEAD request to test whether a dir exists.
# git-hub pages does not return a directory listing, so we trick it
# into returning a HTTP 200 status code
# To read the dir, our file system abstraction would expect a \n separated list of
# directory contents, where directories end with a slash "/"
TARGETPROJECT="$TARGET/project"
for line in $(find $TARGETPROJECT -type d); do
    touch "$line/index.html";
    if [ "$line" = "$TARGETPROJECT" ]; then
        continue;
    fi
    echo "$(basename $line)/" >> "$(dirname $line)/index.html";
done
echo "----------------------";
for line in $(find $TARGETPROJECT -type f); do
    if [ "$(basename $line)" = 'index.html' ]; then
        continue;
    fi
    echo "$(basename $line)" >> "$(dirname $line)/index.html";
done
